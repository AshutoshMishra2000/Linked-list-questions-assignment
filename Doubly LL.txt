import java.util.Scanner;

class Node<T> {
    T data;
    Node<T> next;
    Node<T> prev;
    Node<T> tail;

    Node(T data) {
        this.data = data;
        next = null;
        prev = null;
    }
}

class LinkedListOperations<T> {
    Node<T> start;
    Node<T> tail;

    public void addStart(Node<T> node) {

        if (start == null) {
            start = node;
            tail = node;
        } else {
           
            node.next = start;
            start.prev = node;
            node.prev = null;
            start = node;
        }
    }

    public void addAtEnd(Node<T> node) {
        if (start == null) {
            start = node;
            tail = start;
        } else {
            tail.next = node;
            node.prev = tail;
            tail = node;
            node.next = null;

        }
    }

    public void print() {
        Node<T> temp = start;

        if (temp == null) {
            System.out.println("Empty Linked List");
        }
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.next;
        }
    }

    public void addAtPos(int pos, Node<T> node) {
        if (start == null && pos != 0) {
            System.out.println("position does not exists");
        }
        int i = 1;
        Node<T> temp = start;
        while (i < pos - 1) {
            temp = temp.next;
            i++;
        }

        node.next = temp.next;
        temp.next = node;
        node.prev = temp;
    }

    public void deleteAtbegin() {
        Node<T> temp = start.next;
        if (start == null) {
            System.out.println("No Node to delete");
        }
        if (start.next == null) {
            start = null;
        }

        else {
            temp.prev = null;
            start = temp;

        }
    }

    public void deleteAtEnd() {

        if (start == null) {
            System.out.println("No element to delete");
        }
        if (start.next == null) {
            start = null;
        }

        else {

            tail = tail.prev;
            tail.next = null;

        }
    }
}

class linkList {
    public static void main(String[] args) {

        LinkedListOperations<Integer> opr = new LinkedListOperations<>();
        // opr.addStart(new Node<>(4));
        Scanner sc = new Scanner(System.in);
        while (true) {
            System.out.println("Enter ths choice");
            System.out.println("0. to exit!");
            System.out.println("1.Add at begin");
            System.out.println("2.Print Linked List");
            System.out.println("3.At at end");
            System.out.println("4. add at given position..");
            System.out.println("5. delete at begin");
            System.out.println("6. Delete At end");

            int choice = sc.nextInt();
            switch (choice) {
                case 1:
                    System.out.println("1. enter the data..");
                    int data = sc.nextInt();
                    opr.addStart(new Node<Integer>(data));
                    break;
                case 2:
                    opr.print();
                    break;
                case 3:
                    System.out.println("Enter the data");
                    data = sc.nextInt();
                    opr.addAtEnd(new Node<Integer>(data));
                    break;

                case 4:
                    System.out.println("enter the position");
                    int pos = sc.nextInt();
                    System.out.println("Enter the data now");
                    data = sc.nextInt();
                    opr.addAtPos(pos, new Node<Integer>(data));
                    break;
                case 5:
                    opr.deleteAtbegin();
                    break;

                case 6:
                    opr.deleteAtEnd();
                    break;

                case 0:
                    System.exit(0);

                default:
                    System.out.println("Invalid input");
            }
        }

    }
}

/*
 * class Node<T> {
 * T data; // Node Data Part
 * Node<T> next; // Node Reference / Next Node Reference Store Here
 * 
 * // Constructor
 * Node(T data){
 * this.data = data;
 * next = null;
 * }
 * 
 * }
 */